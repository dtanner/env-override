plugins {
    id 'java-library'
    id("maven-publish")
    id 'org.jetbrains.kotlin.jvm' version '1.3.41'
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

repositories {
    jcenter()
    mavenCentral()
}

apply plugin: 'kotlin'
apply plugin: 'idea'

dependencies {
    platform('org.jetbrains.kotlin:kotlin-bom')
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'

    compile "ch.qos.logback:logback-classic:1.1.7"
    compile "io.github.microutils:kotlin-logging:1.6.20"
    compile "commons-beanutils:commons-beanutils:1.9.3"

    testImplementation "io.kotlintest:kotlintest-core:3.3.2"
    testImplementation "io.kotlintest:kotlintest-assertions:3.3.2"
    testImplementation "io.kotlintest:kotlintest-runner-junit5:3.3.2"
    testImplementation "org.jetbrains.kotlin:kotlin-test:1.3.50"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:1.3.50"
    testImplementation "org.junit.jupiter:junit-jupiter-api:5.4.2"

    testRuntime "org.junit.jupiter:junit-jupiter-engine:5.4.2"
    testRuntime "cglib:cglib-nodep:3.1"
}

sourceSets {
    main {
        resources.srcDir 'src/main/resources'
    }
}

task sourcesJar(type: Jar) {
    group 'Build'
    description 'An archive of the source code'
    classifier 'sources'
    from sourceSets.main.allSource
}

test {
    useJUnitPlatform()
    testLogging {
        events "failed"
        exceptionFormat "short"
        showStandardStreams = true
    }
}

jar.finalizedBy sourcesJar

artifacts {
    sourcesJar
}

publishing {
    repositories {
        maven {
            name = project.name
            url = project.project_url
            credentials {
                username = project.findProperty("gpr.user") ?: "dtanner"
                password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
            }
        }
    }
    publications {
        gpr(MavenPublication) {
            from(components.kotlin)
        }
    }
}

